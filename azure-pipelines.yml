trigger: 
- master 

variables:
  buildConfiguration: 'Release'
  webRepository: 'web'
  leaderboardRepository: 'leaderboard'
  tag: '$(Build.BuildId)'
  imagePullSecret: 'secret'

stages:
- stage: 'Build'
  displayName: 'Build and push'
  jobs:  
  - job: 'Build'
    displayName: 'Build job'
    pool:
      vmImage: 'ubuntu-18.04'
    steps:
    - task: Docker@2
      displayName: 'Build and push the image to container registry'
      inputs:
        containerRegistry: 'acr-conn'
        repository: '$(webRepository)'
        command: 'buildAndPush'
        Dockerfile: '**/Dockerfile'
        buildContext: '$(Build.Repository.LocalPath)'
        tags: '$(tag)'
    
    - task: Docker@2
      displayName: 'Build and push the leaderboard image to container registry'
      inputs:
        containerRegistry: 'acr-conn'
        repository: '$(leaderboardRepository)'
        command: 'buildAndPush'
        Dockerfile: '**/Dockerfile'
        buildContext: '$(Build.Repository.LocalPath)'
        tags: '$(tag)'
    
    - publish: '$(Build.SourcesDirectory)/manifests'
      artifact: manifests

- stage: 'Deploy'
  displayName: 'Deploy the containers'
  dependsOn: Build
  jobs:
  - deployment: Deploy
    displayName: Deploy
    pool:
      vmImage: 'ubuntu-18.04'
    environment: 'spike.multicontainer'
    variables:
    - group: Release
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: manifests
            
          - task: KubernetesManifest@0
            displayName: Create imagePullSecret
            inputs:
              action: 'createSecret'
              kubernetesServiceConnection: 'Kubernetes Cluster Connection'
              namespace: 'default'
              secretType: 'dockerRegistry'
              secretName: '$(imagePullSecret)'
              dockerRegistryEndpoint: 'acr-conn'
          - task: KubernetesManifest@0
            displayName: Deploy to Kubernetes cluster
            inputs:
              action: 'deploy'
              kubernetesServiceConnection: 'aks-conn'
              namespace: 'multicontainer'
              manifests: |
                $(Pipeline.Workspace)/manifests/deployment.yml
                $(Pipeline.Workspace)/manifests/service.yml
              containers: |
                $(RegistryName)/$(webRepository):$(tag)
                $(RegistryName)/$(leaderboardRepository):$(tag)
              imagePullSecrets: '$(imagePullSecret)'